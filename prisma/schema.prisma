generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  resetToken    String?
  resetTokenExpiry DateTime?
  isPremium     Boolean   @default(false)
  aiMessagesUsed Int      @default(0)
  aiMessagesResetDate DateTime @default(now())
  accounts      Account[]
  sessions      Session[]
  expenses      Expense[]
  savingsGoals  SavingsGoal[]
  createdAt     DateTime  @default(now())
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  category    String
  date        DateTime
  notes       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SavingsGoal {
  id          String   @id @default(cuid())
  title       String
  targetAmount Float
  currentAmount Float   @default(0)
  targetDate  DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
